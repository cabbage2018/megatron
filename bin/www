#!/usr/bin/env node

/*
  set up log4js
*/

let log4js = require('log4js')
let path = require('path')
let fs = require('fs')
log4js.configure({
	"appenders": {
		"console": {
			"type": "console",
			"pattern": "%d %p %c %m%n"
		},
		"debug": {
			"type": "dateFile",
			"filename": path.join(process.cwd(), './logs/livre.log'),
			"pattern": "yyyy-MM-dd",
			"compress": true,
			"alwaysIncludePattern": true,
		},
		"out": {
			"type": "stdout",
			"layout": {
				"type": "pattern",
				"pattern": "%d %p %c %m%n"
			}
		}
	},
	"categories": {
		"default": { "appenders": ["out", "debug"], "level": "all" },
		"email": { "appenders": ["out"], "level": "error" }
	}
});

// let log = log4js.getLogger('routes::scan')
if (process.env.NODE_ENV !== 'development') {
	// as much as possible for debug, especially the log level is not checked
	// let config = JSON.parse(fs.readFileSync(path.join(process.cwd(), './config/log4js_test.json')))
	log4js.configure({
		"appenders": {
			"console": {
				"type": "console",
				"pattern": "%d %p %c %m%n"
			},
			"debug": {
				"type": "dateFile",
				"filename": path.join(process.cwd(), './logs/livre.log'),
				"pattern": "yyyy-MM-dd.log",
				"compress": true,
				"alwaysIncludePattern": true,
			},
			"out": {
				"type": "stdout",
				"layout": {
					"type": "pattern",
					"pattern": "%d %p %c %m%n"
				}
			}
		},
		"categories": {
			"default": { "appenders": ["console", "debug"], "level": "all" },
			"error": { "appenders": ["out"], "level": "all" },
			"email": { "appenders": ["out"], "level": "all" },
			"request": { "appenders": ["out"], "level": "debug" }
		}
	});
} else {
	// as minimum as possible to save disk
	let mailconfig = JSON.parse(fs.readFileSync(path.join(__dirname, '../config/mailoptions.json')))
	log4js.configure({
		appenders: {
			request: {
				type: 'dateFile',
				filename: path.join(process.cwd(), './logs/request'),
				pattern: 'yyyy-MM-dd.log',
				compress: true,
				alwaysIncludePattern: true,
			},
			error: {
				type: 'file',
				maxLogSize: 2097152,
				backups: 2,
				compress: true,
				keepFileExt: true,
				filename: path.join(process.cwd(), './logs/errors.log'),
				alwaysIncludePattern: true,
			},
			email: {
				//发送错误报告至邮箱
				type: '@log4js-node/smtp',
				sender: mailconfig.email.sender,
				subject: mailconfig.email.subject,
				SMTP: {
					host: mailconfig.email.host,
					port: mailconfig.email.port,
					// secure: true,
					// secureConnection: true, // 使用 SSL
					// tls: {
					//   // do not fail on invalid certs
					//   rejectUnauthorized: false
					// },
					auth: mailconfig.email.auth //auth { user: 'xxx@qq.com', pass: '密码' }
				},
				attachment: {
					enable: true,
					filename: path.join(process.cwd(), './logs/errors.log'),
					message: `See the attached latest runtime report ${__filename}, ${process.cwd()}, ${new Date().toISOString()};`
				},
				// sendInterval: 3600*1,
				recipients: mailconfig.email.recipients,
			},
		},
		categories: {
			default: { appenders: ['error'], level: 'info' },
			error: { appenders: ['error'], level: 'error' },
			email: { appenders: ['email'], level: 'all' },
			request: { appenders: ['request'], level: 'debug' }
		},
	})
}

const log = log4js.getLogger('bin:www')
if (process.env.NODE_ENV === 'development') {
	log.info(`${process.env.NODE_ENV}`)
	log.mark(`${process.env.npm_package_env}`)
} else {
	log.error(process.env)
	// log4js.shutdown()
}
console.log(process.env)

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('labs:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);










// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
// 	var port = parseInt(val, 10);

// 	if (isNaN(port)) {
// 		// named pipe
// 		return val;
// 	}

// 	if (port >= 0) {
// 		// port number
// 		return port;
// 	}

// 	return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
// 	if (error.syscall !== 'listen') {
// 		throw error;
// 	}

// 	var bind = typeof port === 'string'
// 		? 'Pipe ' + port
// 		: 'Port ' + port;

// 	// handle specific listen errors with friendly messages
// 	switch (error.code) {
// 		case 'EACCES':
// 			console.error(bind + ' requires elevated privileges');
// 			process.exit(1);
// 			break;
// 		case 'EADDRINUSE':
// 			console.error(bind + ' is already in use');
// 			process.exit(1);
// 			break;
// 		default:
// 			throw error;
// 	}
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
// 	var addr = server.address();
// 	var bind = typeof addr === 'string'
// 		? 'pipe ' + addr
// 		: 'port ' + addr.port;
// 	debug('Listening on ' + bind);
// }


// /**
//  * Module dependencies.
//  */

// var app = require('../app');
// var debug = require('debug')('agentmodbus:server');
// var http = require('http');

// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
