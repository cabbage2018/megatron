#!/usr/bin/env node
let path = require('path')
let fs = require('fs')

// if (process.env.NODE_ENV === 'development') {
//   log.mark(`${process.env.npm_package_env}`)
// } else {
//   log.error(process.env)
// }
// console.log(process.env)

let log4js = require('log4js')
log4js.configure({
  "appenders": {
    "console": {
      "type": "console",
      "pattern": "%d %p %c %m%n"
    },
    "debug": {
      "type": "dateFile",
      "filename": path.join(process.cwd(), './logs/livre.log'),
      "pattern": "yyyy-MM-dd",
      "compress": true,
      "alwaysIncludePattern": true,
    },
    "out": {
      "type": "stdout",
      "layout": {
        "type": "pattern",
        "pattern": "%d %p %c %m%n"
        }
      }
    },
    "categories": {
      "default": { "appenders": ["out", "debug"], "level": "all" },
      "email": { "appenders": ["out"], "level": "error" }
    }
  });

let log = log4js.getLogger('routes::scan')

log.error(`${process.env.NODE_ENV}`)

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('labs:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
