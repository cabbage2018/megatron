#!/usr/bin/env node

/*
  set up log4js
*/

let log4js = require('log4js')

if (process.env.NODE_ENV === 'production') {
  log4js.configure(require('../config/log4js_test.json'))
  ;
} else {

  let config = require('../config/mailoptions.json')

  log4js.configure({
    appenders: {
      stdout: {
        //控制台输出
        type: 'stdout',
      }, 
      request: {
        //请求日志
        type: 'dateFile',
        filename: './logs/request', // 需要手动建好目录,如图1所示
        // 指定pattern后无限备份
        pattern: 'yyyy-MM-dd_access.log',
        // 不指定pattern时若为true会使用默认值'.yyyy-MM-dd'
        alwaysIncludePattern: true,
      },
      error: {
        //错误日志
        type: 'dateFile',
        filename: './logs/error',
        pattern: 'yyyy-MM-dd.log',
        alwaysIncludePattern: true,
      },
      fatal: {
        type: 'dateFile',
        filename: './logs/error',
        pattern: 'yyyy-MM-dd.log',
        alwaysIncludePattern: true,
      },
      other: {
        //其他日志
        type: 'file',
        maxLogSize: 8388608,
        backups: 3,
        compress : false,
        keepFileExt : true,
        filename: './logs/livre.log',
        // pattern: 'yyyy-MM-dd.log',
        alwaysIncludePattern: true,
      },
      email: {
        //发送错误报告至邮箱
        type: '@log4js-node/smtp',
        sender: config.email.sender, //发送邮件的邮箱
        subject: config.email.subject, //标题
        SMTP: {
          host: config.email.host, 
          port: config.email.port,
          // secure: true,
          secureConnection: true, // 使用 SSL
          // tls: {
          //   // do not fail on invalid certs
          //   rejectUnauthorized: false
          // },
          auth: config.email.auth //auth { user: 'xxx@qq.com', pass: '密码' }
        },
        // attachment: {
        //   enable: true,
        //   filename: './livre.log',
        //   message: 'See the attachment for the latest logs'
        // },
        // sendInterval: 3600*1,
        recipients: config.email.recipients, //接收邮件的邮箱
      },
    },

    categories: {
      //email 方便得知项目bug
      default: { appenders: ['stdout', 'request', 'other'/*, 'email'*/], level: 'all' },
      //default 当你使用log4js.getLogger(level)，level不传，默认使用default
      error: { appenders: ['stdout', 'error'], level: 'error' },
      email: { appenders: ['stdout', 'email'], level: 'error' },
      other: { appenders: ['other'], level: 'all' },
    },
  })
}
const tracer = log4js.getLogger('bin:www')
tracer.info(process.env.NODE_ENV || 'production', 'mode for logging')


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fieldbridge:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
